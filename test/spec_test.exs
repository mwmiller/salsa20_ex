defmodule SpecTest do
  use ExUnit.Case
  doctest Salsa20
  import Salsa20
  import VectorHelper

  @moduledoc """

  The tests from the specfication paper:

  http://cr.yp.to/snuffle/spec.pdf

  """

  test "quarterround" do
    assert quarterround([0x00000000, 0x00000000, 0x00000000, 0x00000000]) == [
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000
           ]

    assert quarterround([0x00000001, 0x00000000, 0x00000000, 0x00000000]) == [
             0x08008145,
             0x00000080,
             0x00010200,
             0x20500000
           ]

    assert quarterround([0x00000000, 0x00000001, 0x00000000, 0x00000000]) == [
             0x88000100,
             0x00000001,
             0x00000200,
             0x00402000
           ]

    assert quarterround([0x00000000, 0x00000000, 0x00000001, 0x00000000]) == [
             0x80040000,
             0x00000000,
             0x00000001,
             0x00002000
           ]

    assert quarterround([0x00000000, 0x00000000, 0x00000000, 0x00000001]) == [
             0x00048044,
             0x00000080,
             0x00010000,
             0x20100001
           ]

    assert quarterround([0xE7E8C006, 0xC4F9417D, 0x6479B4B2, 0x68C67137]) == [
             0xE876D72B,
             0x9361DFD5,
             0xF1460244,
             0x948541A3
           ]

    assert quarterround([0xD3917C5B, 0x55F1C407, 0x52A58A7A, 0x8F887A3B]) == [
             0x3E2F308C,
             0xD90A8F36,
             0x6AB2A923,
             0x2883524C
           ]
  end

  test "rowround" do
    assert rowround([
             0x00000001,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000001,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000001,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000001,
             0x00000000,
             0x00000000,
             0x00000000
           ]) == [
             0x08008145,
             0x00000080,
             0x00010200,
             0x20500000,
             0x20100001,
             0x00048044,
             0x00000080,
             0x00010000,
             0x00000001,
             0x00002000,
             0x80040000,
             0x00000000,
             0x00000001,
             0x00000200,
             0x00402000,
             0x88000100
           ]

    assert rowround([
             0x08521BD6,
             0x1FE88837,
             0xBB2AA576,
             0x3AA26365,
             0xC54C6A5B,
             0x2FC74C2F,
             0x6DD39CC3,
             0xDA0A64F6,
             0x90A2F23D,
             0x067F95A6,
             0x06B35F61,
             0x41E4732E,
             0xE859C100,
             0xEA4D84B7,
             0x0F619BFF,
             0xBC6E965A
           ]) == [
             0xA890D39D,
             0x65D71596,
             0xE9487DAA,
             0xC8CA6A86,
             0x949D2192,
             0x764B7754,
             0xE408D9B9,
             0x7A41B4D1,
             0x3402E183,
             0x3C3AF432,
             0x50669F96,
             0xD89EF0A8,
             0x0040EDE5,
             0xB545FBCE,
             0xD257ED4F,
             0x1818882D
           ]
  end

  test "columnround" do
    assert columnround([
             0x00000001,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000001,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000001,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000001,
             0x00000000,
             0x00000000,
             0x00000000
           ]) == [
             0x10090288,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000101,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00020401,
             0x00000000,
             0x00000000,
             0x00000000,
             0x40A04001,
             0x00000000,
             0x00000000,
             0x00000000
           ]

    assert columnround([
             0x08521BD6,
             0x1FE88837,
             0xBB2AA576,
             0x3AA26365,
             0xC54C6A5B,
             0x2FC74C2F,
             0x6DD39CC3,
             0xDA0A64F6,
             0x90A2F23D,
             0x067F95A6,
             0x06B35F61,
             0x41E4732E,
             0xE859C100,
             0xEA4D84B7,
             0x0F619BFF,
             0xBC6E965A
           ]) == [
             0x8C9D190A,
             0xCE8E4C90,
             0x1EF8E9D3,
             0x1326A71A,
             0x90A20123,
             0xEAD3C4F3,
             0x63A091A0,
             0xF0708D69,
             0x789B010C,
             0xD195A681,
             0xEB7D5504,
             0xA774135C,
             0x481C2027,
             0x53A8E4B5,
             0x4C1F89C5,
             0x3F78C9C8
           ]
  end

  test "doubleround" do
    assert doubleround([
             0x00000001,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000,
             0x00000000
           ]) == [
             0x8186A22D,
             0x0040A284,
             0x82479210,
             0x06929051,
             0x08000090,
             0x02402200,
             0x00004000,
             0x00800000,
             0x00010200,
             0x20400000,
             0x08008104,
             0x00000000,
             0x20500000,
             0xA0000040,
             0x0008180A,
             0x612A8020
           ]

    assert doubleround([
             0xDE501066,
             0x6F9EB8F7,
             0xE4FBBD9B,
             0x454E3F57,
             0xB75540D3,
             0x43E93A4C,
             0x3A6F2AA0,
             0x726D6B36,
             0x9243F484,
             0x9145D1E8,
             0x4FA9D247,
             0xDC8DEE11,
             0x054BF545,
             0x254DD653,
             0xD9421B6D,
             0x67B276C1
           ]) == [
             0xCCAAF672,
             0x23D960F7,
             0x9153E63A,
             0xCD9A60D0,
             0x50440492,
             0xF07CAD19,
             0xAE344AA0,
             0xDF4CFDFC,
             0xCA531C29,
             0x8E7943DB,
             0xAC1680CD,
             0xD503CA00,
             0xA74B2AD6,
             0xBC331C5C,
             0x1DDA24C7,
             0xEE928277
           ]
  end

  test "s20_hash" do
    assert s20_hash(
             <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0>>
           ) ==
             <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0>>

    assert s20_hash(
             <<211, 159, 13, 115, 76, 55, 82, 183, 3, 117, 222, 37, 191, 187, 234, 136, 49, 237,
               179, 48, 1, 106, 178, 219, 175, 199, 166, 48, 86, 16, 179, 207, 31, 240, 32, 63,
               15, 83, 93, 161, 116, 147, 48, 113, 238, 55, 204, 36, 79, 201, 235, 79, 3, 81, 156,
               47, 203, 26, 244, 243, 88, 118, 104, 54>>
           ) ==
             <<109, 42, 178, 168, 156, 240, 248, 238, 168, 196, 190, 203, 26, 110, 170, 154, 29,
               29, 150, 26, 150, 30, 235, 249, 190, 163, 251, 48, 69, 144, 51, 57, 118, 40, 152,
               157, 180, 57, 27, 94, 107, 42, 236, 35, 27, 111, 114, 114, 219, 236, 232, 135, 111,
               155, 110, 18, 24, 232, 95, 158, 179, 19, 48, 202>>

    assert s20_hash(
             <<88, 118, 104, 54, 79, 201, 235, 79, 3, 81, 156, 47, 203, 26, 244, 243, 191, 187,
               234, 136, 211, 159, 13, 115, 76, 55, 82, 183, 3, 117, 222, 37, 86, 16, 179, 207,
               49, 237, 179, 48, 1, 106, 178, 219, 175, 199, 166, 48, 238, 55, 204, 36, 31, 240,
               32, 63, 15, 83, 93, 161, 116, 147, 48, 113>>
           ) ==
             <<179, 19, 48, 202, 219, 236, 232, 135, 111, 155, 110, 18, 24, 232, 95, 158, 26, 110,
               170, 154, 109, 42, 178, 168, 156, 240, 248, 238, 168, 196, 190, 203, 69, 144, 51,
               57, 29, 29, 150, 26, 150, 30, 235, 249, 190, 163, 251, 48, 27, 111, 114, 114, 118,
               40, 152, 157, 180, 57, 27, 94, 107, 42, 236, 35>>
  end

  @tag :hardcore
  test "million s20_hash" do
    assert s20_hash(
             <<6, 124, 83, 146, 38, 191, 9, 50, 4, 161, 47, 222, 122, 182, 223, 185, 75, 27, 0,
               216, 16, 122, 7, 89, 162, 104, 101, 147, 213, 21, 54, 95, 225, 253, 139, 176, 105,
               132, 23, 116, 76, 41, 176, 207, 221, 34, 157, 108, 94, 94, 99, 52, 90, 117, 91,
               220, 146, 190, 239, 143, 196, 176, 130, 186>>,
             1_000_000
           ) ==
             <<8, 18, 38, 199, 119, 76, 215, 67, 173, 127, 144, 162, 103, 212, 176, 217, 192, 19,
               233, 33, 159, 197, 154, 160, 128, 243, 219, 65, 171, 136, 135, 225, 123, 11, 68,
               86, 237, 82, 20, 155, 133, 189, 9, 83, 167, 116, 194, 78, 122, 127, 195, 185, 185,
               204, 188, 90, 245, 9, 183, 248, 226, 85, 245, 104>>
  end

  test "hash" do
    k =
      from_hex("""
       4a 5d 9d 5b a4 ce 2d e1
       72 8e 3b f4 80 35 0f 25
       e0 7e 21 c9 47 d1 9e 33
       76 f0 9b 3c 1e 16 17 42
      """)

    n = <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0>>

    h =
      from_hex("""
       1b 27 55 64 73 e9 85 d4
       62 cd 51 19 7a 9a 46 c7
       60 09 54 9e ac 64 74 f2
       06 c4 ee 08 44 f6 83 89
      """)

    assert hash(k, n) == h
  end
end
